/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package moniac;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.List;
import moniac.World.MigrationRecord;

/**
 *
 * @author dave
 */
public class MapPanel extends javax.swing.JPanel
{
    List< Tile > tiles;
    float scale;
    Rectangle bounds = new Rectangle( 0, 0, 10, 10 );
    
    /**
     * Creates new form MapPanel
     */
    public MapPanel()
    {
        initComponents();
    }

    public void setLocations( List<Tile> locations )
    {
        this.tiles = locations;
        
        bounds = World.instance.getBounds();
    }
    
    public Tile getTileAtPoint( Point p )
    {
        p.x = (int) Math.floor(p.x/scale + bounds.x);
        p.y = (int) Math.floor(p.y/scale + bounds.y);
        
        for( Tile tile : tiles )
            if( tile.getPerimeter().contains( p ) )
                return tile;
        
        return null;
    }

    @Override
    protected void paintComponent( Graphics g )
    {
        scale = Math.min( getWidth() / bounds.width, getHeight() / bounds.height );
        
        if( tiles != null )
            for( Tile tile : tiles )
            {
                paintTile( (Graphics2D) g, tile );
            }
        
        if( World.instance != null )
            for( MigrationRecord migration : World.instance.migrationLog )
            {
                Rectangle from = migration.from.getPerimeter().getBounds();
                Rectangle to   = migration.to  .getPerimeter().getBounds();

                g.setColor( Color.yellow );
                g.drawLine( (int) (from.getCenterX() * scale), (int) (from.getCenterY() * scale), (int) (to.getCenterX() * scale), (int) (to.getCenterY() * scale) );
            }
    }
    
    void setTileTemplate( Tile tile )
    {
        int pop = 0;
        float happiness = 0;
        for( Human agent : tile.getPeople() )
        {
            pop += agent.getPopulation();
            
            happiness += agent.getSatiation() * agent.getPopulation();
        }
        happiness /= pop;
        
        tilePopLabel.setText( String.format( "%d", pop ) );
        tileHappinessLabel.setText( String.format( "%3.1f", happiness ) );
    }
    
    void paintTile( Graphics2D g, Tile tile )
    {
        Graphics2D g2 = (Graphics2D) g.create();
        
        g2.scale( scale, scale );        
        g2.translate( -bounds.x, -bounds.y );
        
        g2.setStroke( new BasicStroke( 1 / scale ) );
        
        g2.setColor( Color.green );
        g2.fill( tile.getPerimeter() );
        g2.setColor( Color.BLACK );
        g2.draw( tile.getPerimeter() );
                        
        Rectangle tileBounds = tile.getPerimeter().getBounds();
        
        tileTemplate.setSize( (int) (tileBounds.getWidth() * scale), (int) (tileBounds.getHeight() * scale ) );
        tileTemplate.doLayout();
        
        setTileTemplate( tile );

        Graphics2D g3 = (Graphics2D) g.create();
        g3.translate( tileBounds.x * scale, tileBounds.y * scale );
        tileTemplate.paint( g3 );
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        tileTemplate = new javax.swing.JPanel();
        tilePopLabel = new javax.swing.JLabel();
        tileHappinessLabel = new javax.swing.JLabel();

        tileTemplate.setOpaque(false);

        tilePopLabel.setText("0");

        tileHappinessLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        tileHappinessLabel.setText("1");

        org.jdesktop.layout.GroupLayout tileTemplateLayout = new org.jdesktop.layout.GroupLayout(tileTemplate);
        tileTemplate.setLayout(tileTemplateLayout);
        tileTemplateLayout.setHorizontalGroup(
            tileTemplateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tileTemplateLayout.createSequentialGroup()
                .addContainerGap()
                .add(tilePopLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tileHappinessLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        tileTemplateLayout.setVerticalGroup(
            tileTemplateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tileTemplateLayout.createSequentialGroup()
                .addContainerGap()
                .add(tileTemplateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tilePopLabel)
                    .add(tileHappinessLabel))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 240, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 152, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel tileHappinessLabel;
    private javax.swing.JLabel tilePopLabel;
    private javax.swing.JPanel tileTemplate;
    // End of variables declaration//GEN-END:variables
}
